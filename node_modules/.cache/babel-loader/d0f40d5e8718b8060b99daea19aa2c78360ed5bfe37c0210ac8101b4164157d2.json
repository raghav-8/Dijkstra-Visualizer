{"ast":null,"code":"var _jsxFileName = \"C:\\\\Raghav\\\\flutter\\\\Dijkstra-Visualizer\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"Visualize Dijkstra's Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","jsxDEV","_jsxDEV","Fragment","_Fragment","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIdx","nodeIdx","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["C:/Raghav/flutter/Dijkstra-Visualizer/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}